NAME
  gmux-plugin - gmux plugins overview and development guide

SYNOPSIS
  Plugins in gmux extend system functionality through signal filtering and event processing.

DESCRIPTION
  Gmux plugins are modular extensions that enhance system functionality by intercepting
  and processing system signals. Plugins can modify keyboard behavior, window management,
  and add new system-wide features. Plugins are loaded from the /usr/share/gmux/plugins/
  directory and can be enabled/disabled via configuration.

PLUGINS
  keyboard_touch
    Touch keyboard plugin that provides virtual touch input using keyboard controls.
    Allows users to simulate touch events using keyboard navigation and provides
    visual feedback for touch interactions. Supports drag, drop, and multi-touch
    simulation through keyboard modifiers.
    See gmux-plugin-keyboard_touch(1) for detailed information.

  screen_keyboard
    On-screen keyboard plugin that provides a graphical keyboard interface.
    Displays a virtual keyboard on screen for touch input, supporting all standard
    keys including function keys, modifiers, and special characters. Automatically
    appears when no physical keyboard is detected.
    See gmux-plugin-screen_keyboard(1) for detailed information.

  window_control
    Window management plugin that provides keyboard shortcuts for window operations.
    Enables quick window switching, movement, resizing, and control operations
    using Alt key combinations. Provides comprehensive window manipulation
    capabilities without requiring mouse input.
    See gmux-plugin-window_control(1) for detailed information.

PLUGIN STRUCTURE
  Plugins follow a standard structure for signal filtering and event processing:

  Basic Structure:
    local windows = require("gmux/frontend/windows")
    local keyboard = require("keyboard")
    
    -- Plugin functionality
    local function plugin_action()
        -- Plugin logic
    end
    
    -- Register signal filter
    table.insert(windows.signal_filters, function(signal, source, char, code, player)
        -- Signal processing
        return false -- Return true to consume signal
    end)

  Required Components:
    - Signal filter registration
    - Event processing logic
    - Keyboard/input handling
    - Optional UI components

SIGNAL FILTERING
  Plugins intercept system signals through the signal filter mechanism:

  Signal Types:
    - key_down/key_up: Keyboard events with character and key code
    - touch/drag/drop: Touch events with coordinates and modifiers
    - screen_resized: Screen dimension changes
    - clipboard: Clipboard content changes

  Filter Function Parameters:
    - signal: Signal type string
    - source: Component address generating the signal
    - char: Character code (for keyboard events)
    - code: Key code (for keyboard events)
    - player: Player identifier (for multiplayer)

  Filter Return Values:
    - true: Signal consumed, no further processing
    - false: Signal passed to other handlers

KEYBOARD INTEGRATION
  Plugins can integrate with the keyboard system:

  Keyboard State:
    - keyboard.isAltDown(): Check Alt key state
    - keyboard.isShiftDown(): Check Shift key state
    - keyboard.isCtrlDown(): Check Ctrl key state
    - keyboard.keys: Key code constants

  Key Combinations:
    - Alt + key: Common plugin activation
    - Shift + key: Modified behavior
    - Ctrl + key: System shortcuts

WINDOW INTEGRATION
  Plugins can interact with the window system:

  Window Operations:
    - windows.windows: List of all windows
    - windows.focused_window: Currently focused window
    - window:focus(): Focus a window
    - window:close(): Close a window
    - window:minimize(): Minimize a window
    - window:maximize(): Maximize a window

  Window Properties:
    - window:position(): Get window position
    - window:set_position(x, y): Set window position
    - window:size(): Get window size
    - window:set_size(w, h): Set window size

PLUGIN DEVELOPMENT
  Creating a new plugin involves several steps:

  1. Plugin File Creation:
     Create a .lua file in /usr/share/gmux/plugins/
     Implement the standard plugin structure

  2. Signal Filter Registration:
     Register signal filters to intercept events
     Implement event processing logic

  3. Plugin Configuration:
     Add plugin to the .enable file for activation
     Configure plugin-specific settings

  4. Testing and Debugging:
     Test plugin functionality in gmux environment
     Debug signal processing and interactions

  Example Plugin:
    local windows = require("gmux/frontend/windows")
    local keyboard = require("keyboard")
    
    local function my_plugin_action()
        -- Plugin functionality
        print("Plugin action executed")
    end
    
    table.insert(windows.signal_filters, function(signal, source, char, code, player)
        if signal == "key_down" and keyboard.isAltDown() and code == keyboard.keys.m then
            my_plugin_action()
            return true -- Consume the signal
        end
        return false -- Pass signal to other handlers
    end)

PLUGIN CONFIGURATION
  Plugins are configured through the .enable file:

  Enable/Disable:
    {
        plugin_name = true,   -- Enable plugin
        other_plugin = false  -- Disable plugin
    }

  Configuration Options:
    - Individual plugin settings
    - Plugin interaction rules
    - Performance optimizations
    - Debug mode settings

ERROR HANDLING
  Plugins should implement proper error handling:

  Signal Filter Errors:
    - Errors in signal filters are caught
    - Failed filters don't prevent other plugins
    - Error logging for debugging

  Plugin Initialization:
    - Missing dependencies are reported
    - Invalid configurations are detected
    - Graceful failure handling

PERFORMANCE CONSIDERATIONS
  Plugins should be designed for performance:

  Signal Processing:
    - Minimize processing time in filters
    - Avoid blocking operations in filters
    - Use efficient data structures

  Memory Management:
    - Clean up resources properly
    - Avoid memory leaks in long-running plugins
    - Use appropriate data structures

SEE ALSO
  gmux(1), gmux-app(1),
  gmux-plugin-keyboard_touch(1), gmux-plugin-screen_keyboard(1),
  gmux-plugin-window_control(1) 