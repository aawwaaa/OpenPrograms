NAME
  gmux-app-lua_repl - interactive Lua interpreter and development environment

SYNOPSIS
  The lua_repl application provides an interactive Lua interpreter within the gmux
  graphical environment for testing, debugging, and development purposes.

DESCRIPTION
  The lua_repl application is a graphical wrapper around the Lua interpreter that
  provides an interactive development environment. It allows users to execute Lua
  code directly with immediate feedback, making it useful for testing code snippets,
  debugging applications, and learning Lua programming.

FEATURES
  - Interactive Lua code execution
  - Immediate feedback and error reporting
  - Command history and navigation
  - Expression evaluation with automatic display
  - Error handling with detailed messages
  - Full Lua language support
  - Access to all system components and APIs

WINDOW CONFIGURATION
  The lua_repl application creates a terminal-style window with the following specifications:
  - Width: 75 characters
  - Height: 22 characters
  - Process name: "Lua REPL"
  - Main program: /bin/lua.lua

INTERFACE LAYOUT
  The lua_repl provides a terminal-style interface:
  - Command prompt: "lua>"
  - Input area for code entry
  - Output display area
  - Error message display
  - Command history support

USAGE
  Launch the lua_repl application from the gmux desktop:
  1. Click on the lua_repl icon in the application menu
  2. The REPL window will open with a "lua>" prompt
  3. Enter Lua code and press Enter to execute
  4. View results and error messages immediately
  5. Use up/down arrows for command history

  Basic Usage:
    lua> print("Hello, World!")
    Hello, World!
    
    lua> x = 10
    lua> y = 20
    lua> print(x + y)
    30
    
    lua> = x * y
    200

  Expression Evaluation:
    - Prefix expressions with "=" for automatic result display
    - Regular statements execute without output
    - Return values are automatically displayed for expressions

  Error Handling:
    lua> print(nil + 5)
    stdin:1: attempt to perform arithmetic on a nil value (global 'nil')
    
    lua> undefined_function()
    stdin:1: attempt to call a nil value (global 'undefined_function')

TECHNICAL IMPLEMENTATION
  The lua_repl application integrates with the OpenOS Lua interpreter:

  Application Structure:
    return {
        name = "Lua REPL",
        draw_icon = function(gpu, colors, x, y)
            -- Icon drawing implementation
        end,
        graphics_process = {
            width = 75, height = 22,
            main_path = "/bin/lua.lua",
            name = "Lua REPL"
        }
    }

  REPL Functionality:
    - Direct integration with /bin/lua.lua
    - Full Lua language support
    - Access to all OpenOS APIs
    - Component system integration
    - File system access
    - Network capabilities

  Input Processing:
    - Line-by-line code execution
    - Expression detection and evaluation
    - Error capture and display
    - Command history management
    - Input validation

LUA LANGUAGE SUPPORT
  The lua_repl supports the complete Lua language:
  - All Lua syntax and constructs
  - Standard library functions
  - Table operations and metatables
  - Coroutines and threading
  - Error handling with pcall/xpcall
  - Metamethods and operator overloading

SYSTEM INTEGRATION
  The lua_repl has access to all OpenOS systems:
  - Component system (component.*)
  - File system (filesystem.*)
  - Event system (event.*)
  - Computer API (computer.*)
  - Serialization (serialization.*)
  - All other OpenOS libraries

  Example System Access:
    lua> component.list()
    {gpu = "12345678", screen = "87654321", ...}
    
    lua> computer.energy()
    1000
    
    lua> filesystem.list("/")
    {"bin", "home", "usr", ...}

DEVELOPMENT FEATURES
  The lua_repl is particularly useful for development:
  - Quick code testing and prototyping
  - API exploration and documentation
  - Debugging complex expressions
  - Learning Lua programming
  - System administration tasks

  Development Workflow:
    1. Test code snippets in REPL
    2. Debug complex expressions
    3. Explore system APIs
    4. Prototype functions
    5. Transfer working code to files

ERROR HANDLING
  The lua_repl provides comprehensive error handling:
  - Syntax errors with line numbers
  - Runtime errors with stack traces
  - Type errors with detailed messages
  - System errors with context
  - Graceful error recovery

  Error Examples:
    lua> function test() error("test error") end
    lua> test()
    stdin:1: test error
    stack traceback:
        stdin:1: in function 'test'
        stdin:1: in main chunk

LIMITATIONS
  - Single-line input (no multi-line editing)
  - No persistent session storage
  - Limited to current process environment
  - No external file editing capabilities
  - No debugging breakpoints

SEE ALSO
  gmux(1), gmux-app(1), lua(1) 