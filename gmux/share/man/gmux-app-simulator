NAME
  gmux-app-simulator - virtual component simulator and testing environment

SYNOPSIS
  The simulator application provides a comprehensive virtual environment for testing
  and development with configurable components and machine configurations.

DESCRIPTION
  The simulator application is an advanced testing and development tool that creates
  virtual environments with configurable hardware components. It allows developers
  to test applications in isolated environments with custom component configurations,
  making it ideal for development, testing, and debugging complex systems.

FEATURES
  - Virtual component simulation
  - Configurable machine environments
  - Component type support (GPU, screen, keyboard, filesystem, EEPROM, API)
  - Real-time component configuration
  - Machine state persistence
  - EEPROM boot simulation
  - Isolated testing environments

WINDOW CONFIGURATION
  The simulator application creates a configuration window with the following specifications:
  - Width: 40 characters
  - Height: 20 characters
  - Process name: "Simulator"

INTERFACE LAYOUT
  The simulator uses a tabbed interface with two main sections:

  General Tab:
    - Configuration file path display
    - Save and Run buttons
    - Machine configuration management

  Components Tab:
    - List of configured components
    - Add/Remove/Edit component buttons
    - Component type and configuration display
    - Virtual and real component management

COMPONENT TYPES
  The simulator supports various component types:

  GPU:
    - Virtual graphics processing unit
    - Configurable resolution (width, height)
    - Address specification
    - Graphics context isolation

  Screen:
    - Virtual display component
    - Keyboard integration option
    - Address specification
    - Touch event simulation

  Keyboard:
    - Virtual input device
    - Key event simulation
    - Input handling isolation

  Filesystem:
    - Virtual file system
    - TmpFS support
    - Path configuration
    - Label specification

  EEPROM:
    - Virtual boot device
    - Store path configuration
    - Readonly option
    - Label specification

  API:
    - Custom API components
    - Path to API implementation
    - Name specification
    - Dynamic loading

USAGE
  Launch the simulator application from the gmux desktop:
  1. Click on the simulator icon in the application menu
  2. The configuration window will open
  3. Configure components in the Components tab
  4. Set configuration file path in General tab
  5. Click "Run" to start the simulation

  Component Configuration:
    - Click "Add" to add new components
    - Select component type from list
    - Configure component parameters
    - Click "Edit" to modify existing components
    - Click "Remove" to delete components

  Machine Configuration:
    - Set machine.lua path for boot code
    - Configure component list
    - Save configuration to file
    - Load existing configurations

TECHNICAL IMPLEMENTATION
  The simulator creates isolated virtual environments:

  Application Structure:
    return {
        name = "Simulator",
        draw_icon = function(gpu, colors, x, y)
            -- Icon drawing implementation
        end,
        graphics_process = {
            width = 40, height = 20,
            main = main, name = "Simulator"
        }
    }

  Virtual Environment Creation:
    1. Load component type definitions
    2. Create virtual component instances
    3. Set up isolated process environment
    4. Load machine configuration
    5. Execute machine code in isolated context

  Component Virtualization:
    - Virtual GPU with isolated graphics context
    - Virtual screen with event simulation
    - Virtual keyboard with input isolation
    - Virtual filesystem with path mapping
    - Virtual EEPROM with boot code storage

CONFIGURATION FILES
  The simulator uses configuration files for persistence:

  Configuration Format:
    {
        machine_lua = "/path/to/machine.lua",
        components = {
            {
                type = "gpu",
                virtual = true,
                width = 60,
                height = 20
            },
            {
                type = "filesystem",
                virtual = true,
                filesystem = "tmpfs",
                path = "/simulator/config",
                label = "TmpFs"
            }
        }
    }

  Default Configuration:
    - TmpFS filesystem at /simulator/config
    - Lua shell EEPROM
    - 60x20 GPU
    - Screen with keyboard

MACHINE CODE EXECUTION
  The simulator executes machine code in isolated environments:

  Boot Process:
    1. Load EEPROM content
    2. Execute boot code
    3. Initialize virtual components
    4. Start machine execution
    5. Handle errors and termination

  Error Handling:
    - EEPROM loading errors
    - Component initialization failures
    - Machine code execution errors
    - Graceful error reporting

DEVELOPMENT WORKFLOW
  The simulator supports various development scenarios:

  Component Testing:
    1. Create virtual component configuration
    2. Test component interactions
    3. Debug component behavior
    4. Validate component APIs

  Application Testing:
    1. Configure test environment
    2. Load application code
    3. Execute in isolated environment
    4. Monitor behavior and errors

  System Integration:
    1. Set up complex component configurations
    2. Test system interactions
    3. Validate integration points
    4. Debug system-wide issues

ERROR HANDLING
  The simulator provides comprehensive error handling:
  - Component creation failures
  - Configuration file errors
  - Machine code execution errors
  - Virtual environment setup failures
  - Resource allocation errors

LIMITATIONS
  - Limited to supported component types
  - No network component simulation
  - Fixed virtual environment size
  - No real-time component hot-swapping
  - Limited to single machine per simulation

SEE ALSO
  gmux(1), gmux-app(1) 