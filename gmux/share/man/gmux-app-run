NAME
  gmux-app-run - program launcher for graphical applications

SYNOPSIS
  The run application provides a simple interface for launching custom programs
  in new graphical windows within the gmux environment.

DESCRIPTION
  The run application is a program launcher that allows users to start custom
  applications by specifying a file path. It creates a new graphical window
  for the launched program with dedicated virtual components and process isolation.
  The launcher provides a simple text input interface for specifying the program path.

FEATURES
  - Simple program path input
  - Automatic window creation for launched programs
  - Process isolation for launched applications
  - Dedicated virtual components for each program
  - Automatic window positioning and sizing
  - Error handling for invalid paths

WINDOW CONFIGURATION
  The run application creates a launcher window with the following specifications:
  - Width: 50 characters
  - Height: 2 characters
  - Process name: "Run"
  - Non-resizable window

LAUNCHER INTERFACE
  The run application provides a minimal interface:
  - Text prompt: "Path:"
  - Input field for program path
  - Automatic execution upon path entry
  - Simple text-based input handling

USAGE
  Launch the run application from the gmux desktop:
  1. Click on the run icon in the application menu
  2. The launcher window will open with a path prompt
  3. Enter the full path to the program you want to run
  4. Press Enter to launch the program
  5. The launcher window will close automatically

  Path Examples:
    /home/user/my_program.lua
    /bin/custom_script.lua
    /usr/local/applications/game.lua
    /tmp/test_script.lua

  Program Requirements:
    - Must be a valid Lua file
    - Should be executable by the system
    - Path must be accessible from the current environment
    - Program should handle its own graphics and input

LAUNCHED PROGRAM WINDOW
  When a program is launched, it receives:
  - New graphical window (60x20 characters by default)
  - Position at coordinates (2,2)
  - Dedicated virtual GPU, keyboard, and screen
  - Isolated process environment
  - Window title matching the program path

TECHNICAL IMPLEMENTATION
  The run application uses the gmux API for program launching:

  Application Structure:
    return {
        name = "Run...",
        draw_icon = function(gpu, colors, x, y)
            -- Icon drawing implementation
        end,
        graphics_process = {
            width = 50, height = 2,
            main = main, name = "Run"
        }
    }

  Program Launch Process:
    1. User enters program path
    2. Path is resolved using shell.resolve()
    3. New graphics process is created with:
       - Width: 60, Height: 20
       - Main path: resolved program path
    4. New window is created with:
       - Source: graphics process result
       - Title: resolved program path
       - Position: (2,2)
       - Event handler: process result
    5. Launcher window closes automatically

  Error Handling:
    - Invalid paths are reported
    - File not found errors are displayed
    - Permission errors are handled
    - Launch failures are reported

COLOR SCHEME
  The run application uses different color schemes for different display depths:

  Colorful Mode (16-bit depth):
    - background: 0x000000
    - prompt: 0x00ffff
    - text: 0xffffff

  Black/White Mode (1-bit depth):
    - background: 0xffffff
    - prompt: 0x000000
    - text: 0x000000

PROGRAM REQUIREMENTS
  Programs launched by the run application should:
  - Be valid Lua files
  - Handle their own graphics output
  - Manage keyboard and screen input
  - Implement proper event handling
  - Clean up resources when finished

  Example Program Structure:
    local component = require("component")
    local gpu = component.gpu
    
    -- Program initialization
    gpu.set(1, 1, "Hello, World!")
    
    -- Event handling
    while true do
        local event = {computer.pullSignal()}
        if event[1] == "key_down" then
            -- Handle keyboard input
        end
    end

ERROR SCENARIOS
  Common error conditions and handling:
  - File not found: Error message displayed
  - Permission denied: Access error reported
  - Invalid Lua syntax: Parse error shown
  - Runtime errors: Error displayed in launched window
  - Path resolution failure: Invalid path error

LIMITATIONS
  - Single program launch per run instance
  - Fixed window size for launched programs
  - No program arguments support
  - No background execution
  - Limited to Lua programs only

SEE ALSO
  gmux(1), gmux-app(1), start(1) 