  Generated by cursor

NAME
  gmux - graphical multitasking operating system for OpenComputers

SYNOPSIS
  gmux
  start <path>
  display [gpu_number] [rebind_screen_number]

DESCRIPTION
  Gmux is a graphical multitasking operating system based on OpenComputers, providing a modern desktop environment and powerful multi-process management capabilities. It offers a complete graphical interface with window management, multi-tasking support, and real-time graphics rendering.

  The system consists of several key components:
  - Backend core system for process management and virtual components
  - Frontend graphical interface with window management
  - Built-in applications and development tools
  - API interface for creating custom applications

COMMANDS
  gmux
    Start the main gmux graphical system. This launches the desktop environment with window management and multi-tasking capabilities.

  start <path>
    Launch a program in a new graphical window. The program will run in its own process with dedicated GPU, keyboard, and screen components.
    
    The window will be created with default size (90x20) and positioned at coordinates (10,10).

  display [gpu_number] [rebind_screen_number]
    Manage GPU and screen component bindings. Lists all available GPUs and screens, then allows rebinding components.
    
    - gpu_number: Index of the GPU to set as primary
    - rebind_screen_number: Optional screen index to rebind to the selected GPU

API FUNCTIONS
  The gmux system provides a comprehensive API through the gmuxapi component:

  create_graphics_process(options)
    Create a new graphics process with dedicated virtual components.
    
    Options:
    - width: Window width (default: 30, max: screen width - 2)
    - height: Window height (default: 10, max: screen height - 2)
    - main_path: Path to the main program file
    - name: Process name
    - components: Additional components to include

  create_window(options)
    Create a new window in the desktop environment.
    
    Options:
    - source: Graphics source (process result or buffer)
    - title: Window title
    - x, y: Window position
    - event_handler: Event handling function
    - resizable: Whether window can be resized
    - layer: Window layer for stacking order

  create_window_buffer(options, func)
    Create a window with a temporary buffer for drawing.
    
    Options:
    - width, height: Buffer dimensions
    - title: Window title
    - x, y: Window position
    - event_handler: Event handling function
    
    The func parameter is called with the GPU component for drawing.

  get_processes()
    Return a list of all running processes.

  get_windows()
    Return a list of all open windows.

  show_error(error)
    Display an error message in a popup window.

APPLICATIONS
  The gmux system includes several built-in applications:

  Shell
    Command line terminal for running system commands and programs.

  Monitor
    System resource monitor showing CPU usage, memory usage, and energy status.

  Lua REPL
    Interactive Lua interpreter for testing and development.

  Run
    Program launcher for starting applications with graphical interfaces.

  Exit
    System exit utility for shutting down the desktop environment.

SYSTEM REQUIREMENTS
  - OpenComputers mod
  - Computer with graphics display support
  - GPU component
  - Keyboard component
  - Screen component

ENVIRONMENT
  Gmux creates a virtual component environment for each process:
  
  Virtual GPU
    Provides isolated graphics context for each application window.
  
  Virtual Keyboard
    Handles keyboard input for individual applications.
  
  Virtual Screen
    Manages screen events and display for application windows.

EXAMPLES
  Start the gmux system:
    gmux

  Launch a custom program:
    start /home/user/my_program.lua

  Rebind GPU to a different screen:
    display
    1 2

  Create a simple graphical application:
    local api = component.gmuxapi
    local result = api.create_graphics_process({
        width = 40, height = 15,
        main_path = "/path/to/app.lua",
        name = "My App"
    })
    local window = api.create_window({
        source = result,
        title = "My Application",
        x = 5, y = 5
    })

  Create a window with custom drawing:
    local api = component.gmuxapi
    api.create_window_buffer({
        width = 30, height = 10,
        title = "Custom Window"
    }, function(gpu)
        gpu.setBackground(0x0000FF)
        gpu.fill(1, 1, 30, 10, " ")
        gpu.setForeground(0xFFFFFF)
        gpu.set(2, 2, "Hello, Gmux!")
    end)

ERROR HANDLING
  Gmux provides comprehensive error handling:
  - Process errors are displayed in popup windows
  - System errors are shown on the main screen
  - Error messages include process ID and stack traces
  - Failed window creation falls back to console output

DEVELOPMENT
  To create custom applications for gmux:
  1. Create a Lua file with your application logic
  2. Use the gmuxapi component to access system functions
  3. Handle keyboard and screen events as needed
  4. Use virtual components for isolated operation

  Example application structure:
    local component = require("component")
    local api = component.gmuxapi
    
    -- Main application code
    local gpu = component.gpu
    gpu.set(1, 1, "My Application")
    
    -- Handle events
    while true do
        local event = {computer.pullSignal()}
        if event[1] == "key_down" then
            -- Handle keyboard input
        end
    end

APPLICATION DEVELOPMENT
  Gmux applications follow a standard structure defined in the application file:

  Basic Application Structure:
    return {
        name = "Application Name",
        draw_icon = function(gpu, colors, x, y)
            -- Draw application icon
        end,
        graphics_process = {
            width = 80, height = 25,
            main_path = "/path/to/main.lua",
            name = "Process Name"
        }
    }

  Application Components:
    - name: Display name for the application
    - draw_icon: Function to draw the application icon
    - graphics_process: Process configuration
      - width/height: Window dimensions
      - main_path: Path to main application file
      - name: Process name for identification

  Icon Drawing:
    The draw_icon function receives:
    - gpu: GPU component for drawing
    - colors: Color scheme object
    - x, y: Icon position coordinates

  Process Management:
    Applications run in isolated processes with:
    - Dedicated virtual GPU, keyboard, and screen
    - Independent event handling
    - Isolated component access

PLUGIN DEVELOPMENT
  Gmux plugins extend system functionality through signal filtering:

  Plugin Structure:
    local windows = require("gmux/frontend/windows")
    local keyboard = require("keyboard")
    
    -- Plugin initialization
    local function plugin_action()
        -- Plugin functionality
    end
    
    -- Register signal filter
    table.insert(windows.signal_filters, function(signal, source, char, code, player)
        -- Signal processing logic
        return false -- Return true to consume signal
    end)

  Plugin Types:
    - Keyboard plugins: Extend keyboard functionality
    - Window plugins: Modify window behavior
    - System plugins: Add system-wide features

  Signal Filtering:
    Plugins can intercept and modify system signals:
    - key_down/key_up: Keyboard events
    - touch/drag/drop: Touch events
    - screen_resized: Screen events

  Plugin Configuration:
    Plugins are enabled/disabled via the .enable file:
    {
        plugin_name = true/false
    }

SEE ALSO
  gmux-app(1), gmux-plugin(1),
  gmux-app-shell(1), gmux-app-monitor(1), gmux-app-run(1),
  gmux-app-exit(1), gmux-app-lua_repl(1), gmux-app-simulator(1),
  gmux-plugin-keyboard_touch(1), gmux-plugin-screen_keyboard(1),
  gmux-plugin-window_control(1) 